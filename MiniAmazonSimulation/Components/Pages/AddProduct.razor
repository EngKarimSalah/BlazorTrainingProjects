@page "/AddProduct"
@inject IProductService productService
@inject ICategoryService categoryService
@inject NavigationManager Navigation
@attribute [Authorize]

<h3>Add Product</h3>

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="productName">Product Name</label>
        <InputText id="productName" class="form-control" @bind-Value="newProduct.Name" />
    </div>

    <div class="mb-3">
        <label for="productPrice">Price</label>
        <InputNumber id="productPrice" class="form-control" @bind-Value="newProduct.Price" />
    </div>

    <div class="mb-3">
        <label for="productDescription">Description</label>
        <InputTextArea id="productDescription" class="form-control" @bind-Value="newProduct.Description" />
    </div>

    <div class="mb-3">
        <label for="productDescription">Stock</label>
        <InputNumber id="productDescription" class="form-control" @bind-Value="newProduct.Stock" />
    </div>

    <div class="mb-3">
        <label for="categorySelect">Select Category</label>
        <select id="categorySelect" @bind="newProduct.CategoryId" required>
            <option value="" disabled>Select a category</option>
            @foreach (var category in Categories)
            {
             <option value="@category.CatId">@category.Name</option>
            }
         </select>
    </div>

    <button type="submit" class="btn btn-primary">Add Product</button>
</EditForm>

@code {
    private Product newProduct = new Product();
    private List<Category> Categories;

    protected override void OnInitialized()
    {
        Categories = categoryService.GetAll().ToList(); 
    }

    private void HandleValidSubmit()
    {
        productService.AddProduct(newProduct);
        Navigation.NavigateTo("/"); // Redirect to product list page (replace with actual route)
    }
}
